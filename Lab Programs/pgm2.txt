def recAOStar(n):
    print("Expanding Node:", n)
    and_nodes = allNodes.get(n, {}).get('AND', [])
    or_nodes = allNodes.get(n, {}).get('OR', [])
    
    if not and_nodes and not or_nodes:
        return
    
    solvable = False
    marked = {}
    
    while not solvable:
        if len(marked) == len(and_nodes) + len(or_nodes):
            min_cost_least, min_cost_group_least = least_cost_group(and_nodes, or_nodes, {})
            solvable = True
            change_heuristic(n, min_cost_least)
            optimal_child_group[n] = min_cost_group_least
            continue
        
        min_cost, min_cost_group = least_cost_group(and_nodes, or_nodes, marked)
        is_expanded = False
        
        if len(min_cost_group) > 1:
            for node in min_cost_group:
                if node in allNodes:
                    is_expanded = True
                    recAOStar(node)
        else:
            if min_cost_group in allNodes:
                is_expanded = True
                recAOStar(min_cost_group)
        
        if is_expanded:
            min_cost_verify, min_cost_group_verify = least_cost_group(and_nodes, or_nodes, {})
            if min_cost_group == min_cost_group_verify:
                solvable = True
                change_heuristic(n, min_cost_verify)
                optimal_child_group[n] = min_cost_group
        else:
            solvable = True
            change_heuristic(n, min_cost)
            optimal_child_group[n] = min_cost_group
        marked[min_cost_group] = 1
    
    return heuristic(n)

def least_cost_group(and_nodes, or_nodes, marked):
     # Calculate costs for AND nodes
    and_costs = {
        node_pair[0] + node_pair[1]: heuristic(node_pair[0]) + heuristic(node_pair[1]) + 2
        for node_pair in and_nodes if node_pair[0] + node_pair[1] not in marked
    }
    
    # Calculate costs for OR nodes
    or_costs = {
        node: heuristic(node) + 1
        for node in or_nodes if node not in marked
    }

    # Combine costs
    node_wise_cost = {**and_costs, **or_costs}

    # Find the minimum cost group
    min_cost_group = min(node_wise_cost, key=node_wise_cost.get, default=None)
    
    return node_wise_cost.get(min_cost_group, float('inf')), min_cost_group

def heuristic(n):
    return H_dist[n]

def change_heuristic(n, cost):
    H_dist[n] = cost

def print_path(node):
    print(optimal_child_group[node], end="")
    node = optimal_child_group[node]
    if len(node) > 1:
        if node[0] in optimal_child_group:
            print("->", end="")
            print_path(node[0])
        if node[1] in optimal_child_group:
            print("->", end="")
            print_path(node[1])
    else:
        if node in optimal_child_group:
            print("->", end="")
            print_path(node)

H_dist = {'A': -1, 'B': 4, 'C': 2, 'D': 3, 'E': 6, 'F': 8, 'G': 2, 'H': 0, 'I': 0, 'J': 0}
allNodes = {'A': {'AND': [('C', 'D')], 'OR': ['B']}, 'B': {'OR': ['E', 'F']}, 'C': {'OR': ['G'], 'AND': [('H', 'I')]}, 'D': {'OR': ['J']}}
optimal_child_group = {}
optimal_cost = recAOStar('A')
print('Nodes which gives optimal cost are')
print_path('A')
print('\nOptimal Cost is :: ', optimal_cost)